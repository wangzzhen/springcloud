spring:
  application:
    name: config-client
  cloud:
    config:
      name: config #这个属性默认是spring.application.name，这里需要与配置文件前缀一样
                   #也可以将spring.application.name设置成config
      # config server的地址
#      uri: http://localhost:8888/
      # profile对应config server所获取的配置文件中的{profile}，我们这里是dev,test,pro
      profile: dev
      # 指定Git仓库的分支，对应config server所获取的配置文件的{label}
      label: master
      discovery:
        enabled: true   # 表示使用服务发现组件中的Config Server，而不自己指定Config Server的uri，默认false
        service-id: config-server # 指定Config Server在服务发现中的serviceId，默认是configserver

      #配置文件的映射规则：
      #/{application}/{profile}[/{label}]
      #/{application}-{profile}.yml
      #/{label}/{application}-{profile}.yml
      #/{application}-{profile}.properties
      #/{label}/{application}-{profile}.properties
      #application: 表示微服务的虚拟主机名，即配置的spring.application.name
      #profile: 表示当前的环境，dev, test or prod
      #label: 表示git仓库分支，master or relase 默认是master
      #bootstrap.yml优先级比application.yml高，bootstrap.yml中的配置是作为引导配置
      #application会覆盖bootstrap中的非引导配置，因此不建议两种类型配置文件同时存在，
      #如果同时存在则需要注意配置是否会被覆盖

  kafka:
    bootstrap-servers: localhost:9092


#这个配置是暴露刷新端口，bus/refresh全部整合到actuator里面了，需要添加actuator依赖，使用springcloud bus后，
#当在客户端访问/actuator/refresh时只是自己的配置刷新了（config server会去git获取配置），另外的客户端并没有刷新，
#当在客户端访问/actuator/bus-refresh时，所有config client的配置刷新。
#所以使用spingcloud bus后，该配置在服务端配置就可以，客户端无需手动刷新
management:
  endpoints:
    web:
      exposure:
        include: "*"

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/